{"version":3,"file":"component---src-pages-blog-mdx-fields-slug-js-content-file-path-blog-feature-point-matching-affine-index-mdx-e2b593ea32034ebe104f.js","mappings":"wLAKA,MAAMA,EAAWC,IAAgC,IAA/B,KAACC,EAAI,SAAEC,EAAQ,SAAEC,GAASH,EAC1CI,QAAQC,IAAIJ,GACZ,MAAMK,EAAQL,EAAKM,IAAIC,YAAYC,YAAaC,EAAAA,EAAAA,GAAST,EAAKM,IAAIC,YAAYC,iBAAcE,EAC5F,OAAOC,EAAAA,cAAoBC,EAAAA,EAAQ,CACjCC,UAAWb,EAAKM,IAAIC,YAAYO,OAC/BH,EAAAA,cAAoB,IAAK,KAAMX,EAAKM,IAAIC,YAAYQ,MAAOV,GAASM,EAAAA,cAAoBA,EAAAA,SAAgB,KAAMA,EAAAA,cAAoBK,EAAAA,EAAa,CAChJX,MAAOA,EACPY,IAAKjB,EAAKM,IAAIC,YAAYW,iBACxBP,EAAAA,cAAoB,IAAK,KAAM,gBAAiB,IAAKA,EAAAA,cAAoB,IAAK,CAChFQ,KAAMnB,EAAKM,IAAIC,YAAYa,wBAC1BpB,EAAKM,IAAIC,YAAYc,0BAA2BnB,EAAS,EAsB/C,SAASoB,EAAiBC,GACvC,OAAOZ,EAAAA,cAAoBb,EAAUyB,EAAOZ,EAAAA,cAAoBa,EAAAA,EAAqBD,GACvF,C,sECNO,MAAME,EAAa,gBAAoB,CAAC,GAiCxC,SAASC,EAAiBC,GAC/B,MAAMC,EAAoB,aAAiBH,GAG3C,OAAO,WAAc,IAEO,mBAAfE,EACFA,EAAWC,GAGb,IAAIA,KAAsBD,IAChC,CAACC,EAAmBD,GACzB,C","sources":["webpack://blog/./src/pages/blog/{mdx.fields__slug}.js","webpack://blog/./node_modules/@mdx-js/react/lib/index.js"],"sourcesContent":["import GATSBY_COMPILED_MDX from \"/Users/takumi/WebstormProjects/konnitiha3.github.io/blog/feature-point-matching-affine/index.mdx\";\nimport * as React from 'react';\nimport {graphql} from 'gatsby';\nimport {GatsbyImage, getImage} from 'gatsby-plugin-image';\nimport Layout from '../../components/layout';\nconst BlogPost = ({data, location, children}) => {\n  console.log(data);\n  const image = data.mdx.frontmatter.hero_image ? getImage(data.mdx.frontmatter.hero_image) : undefined;\n  return React.createElement(Layout, {\n    pageTitle: data.mdx.frontmatter.title\n  }, React.createElement(\"p\", null, data.mdx.frontmatter.date), image && React.createElement(React.Fragment, null, React.createElement(GatsbyImage, {\n    image: image,\n    alt: data.mdx.frontmatter.hero_image_alt\n  }), React.createElement(\"p\", null, \"Photo Credit:\", \" \", React.createElement(\"a\", {\n    href: data.mdx.frontmatter.hero_image_credit_link\n  }, data.mdx.frontmatter.hero_image_credit_text))), children);\n};\nexport const query = graphql`\n  query ($id: String!) {\n    mdx(id: {eq: $id}) {\n      id\n      frontmatter {\n        title\n        date(formatString: \"MMMM DD, YYYY\")\n        hero_image {\n          childImageSharp {\n            gatsbyImageData\n          }\n        }\n        hero_image_alt\n        hero_image_credit_link\n        hero_image_credit_text\n      }\n    }\n  }\n`;\nBlogPost\nexport default function GatsbyMDXWrapper(props) {\n  return React.createElement(BlogPost, props, React.createElement(GATSBY_COMPILED_MDX, props));\n}\n","/**\n * @typedef {import('react').ReactNode} ReactNode\n * @typedef {import('mdx/types.js').MDXComponents} Components\n *\n * @typedef Props\n *   Configuration.\n * @property {Components | MergeComponents | null | undefined} [components]\n *   Mapping of names for JSX components to React components.\n * @property {boolean | null | undefined} [disableParentContext=false]\n *   Turn off outer component context.\n * @property {ReactNode | null | undefined} [children]\n *   Children.\n *\n * @callback MergeComponents\n *   Custom merge function.\n * @param {Components} currentComponents\n *   Current components from the context.\n * @returns {Components}\n *   Merged components.\n */\n\nimport React from 'react'\n\n/**\n * @type {import('react').Context<Components>}\n * @deprecated\n *   This export is marked as a legacy feature.\n *   That means it’s no longer recommended for use as it might be removed\n *   in a future major release.\n *\n *   Please use `useMDXComponents` to get context based components and\n *   `MDXProvider` to set context based components instead.\n */\nexport const MDXContext = React.createContext({})\n\n/**\n * @param {import('react').ComponentType<any>} Component\n * @deprecated\n *   This export is marked as a legacy feature.\n *   That means it’s no longer recommended for use as it might be removed\n *   in a future major release.\n *\n *   Please use `useMDXComponents` to get context based components instead.\n */\nexport function withMDXComponents(Component) {\n  return boundMDXComponent\n\n  /**\n   * @param {Record<string, unknown> & {components?: Components | null | undefined}} props\n   * @returns {JSX.Element}\n   */\n  function boundMDXComponent(props) {\n    const allComponents = useMDXComponents(props.components)\n    return React.createElement(Component, {...props, allComponents})\n  }\n}\n\n/**\n * Get current components from the MDX Context.\n *\n * @param {Components | MergeComponents | null | undefined} [components]\n *   Additional components to use or a function that takes the current\n *   components and filters/merges/changes them.\n * @returns {Components}\n *   Current components.\n */\nexport function useMDXComponents(components) {\n  const contextComponents = React.useContext(MDXContext)\n\n  // Memoize to avoid unnecessary top-level context changes\n  return React.useMemo(() => {\n    // Custom merge via a function prop\n    if (typeof components === 'function') {\n      return components(contextComponents)\n    }\n\n    return {...contextComponents, ...components}\n  }, [contextComponents, components])\n}\n\n/** @type {Components} */\nconst emptyObject = {}\n\n/**\n * Provider for MDX context\n *\n * @param {Props} props\n * @returns {JSX.Element}\n */\nexport function MDXProvider({components, children, disableParentContext}) {\n  /** @type {Components} */\n  let allComponents\n\n  if (disableParentContext) {\n    allComponents =\n      typeof components === 'function'\n        ? components({})\n        : components || emptyObject\n  } else {\n    allComponents = useMDXComponents(components)\n  }\n\n  return React.createElement(\n    MDXContext.Provider,\n    {value: allComponents},\n    children\n  )\n}\n"],"names":["BlogPost","_ref","data","location","children","console","log","image","mdx","frontmatter","hero_image","getImage","undefined","React","Layout","pageTitle","title","date","GatsbyImage","alt","hero_image_alt","href","hero_image_credit_link","hero_image_credit_text","GatsbyMDXWrapper","props","GATSBY_COMPILED_MDX","MDXContext","useMDXComponents","components","contextComponents"],"sourceRoot":""}